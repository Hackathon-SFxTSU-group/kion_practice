from sentence_transformers import SentenceTransformer
from tqdm import tqdm
import numpy as np

# –ò–º–ø–æ—Ä—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ü–µ–Ω
from utils.scene_tools import (
    enrich_scenes_with_characters,        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —Å—Ü–µ–Ω—ã
    enrich_scenes_with_audio,             # –ü—Ä–∏–≤—è–∑–∫–∞ –∞—É–¥–∏–æ—Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏ —ç–Ω–µ—Ä–≥–∏–∏
    group_semantic_scenes,                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–º—ã—Å–ª—É (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏)
    cluster_scenes_with_time_windows,     # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–∞–º
    resolve_time_overlaps,                # –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è —Å—Ü–µ–Ω
    clean_and_merge_short_scenes,         # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ü–µ–Ω
    save_scenes_report_to_json            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ JSON
)

class SceneEnricher:
    """
    –ö–ª–∞—Å—Å SceneEnricher –æ–±–æ–≥–∞—â–∞–µ—Ç —Å—Ü–µ–Ω—ã (–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –∏–∑ –≤–∏–¥–µ–æ) 
    –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π: –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏, —Ä–µ—á—å—é, –∞—É–¥–∏–æ—ç–Ω–µ—Ä–≥–∏–µ–π,
    –∞ —Ç–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É.
    """

    def __init__(self, segments, energy, device="cuda"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞.

        :param segments: –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ä–µ—á–µ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–∏–∑ ASR)
        :param energy: –ú–∞—Å—Å–∏–≤ –∞—É–¥–∏–æ—ç–Ω–µ—Ä–≥–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        :param device: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è sentence-transformers (–æ–±—ã—á–Ω–æ 'cuda' –∏–ª–∏ 'cpu')
        """
        self.segments = segments
        self.energy = energy
        self.device = device

        print("üß† –ó–∞–≥—Ä—É–∑–∫–∞ sentence-transformer –º–æ–¥–µ–ª–∏...")
        self.sentence_model = SentenceTransformer("all-mpnet-base-v2", device=device)
        print("‚úÖ SentenceTransformer –≥–æ—Ç–æ–≤.")

    def enrich(self, scene_data, track_id_to_person=None):
        """
        –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å—Ü–µ–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —Ä–µ—á–µ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏ —ç–Ω–µ—Ä–≥–∏–∏.

        :param scene_data: –°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω (–∫–∞–∂–¥–∞—è —Å 'start' –∏ 'end')
        :param track_id_to_person: –°–ª–æ–≤–∞—Ä—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ID —Ç—Ä–µ–∫–æ–≤ –≤ –∏–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        :return: –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã
        """
        print("üé≠ –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å—Ü–µ–Ω...")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ —Å—Ü–µ–Ω, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
        scenes = [dict(s) for s in scene_data]

        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å—Ü–µ–Ω—ã
        if track_id_to_person:
            print("üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —Å—Ü–µ–Ω—ã...")
            scenes = enrich_scenes_with_characters(scenes, track_id_to_person)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä–µ—á–∏ –∏ –∞—É–¥–∏–æ—ç–Ω–µ—Ä–≥–∏—é
        print("üîä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—á–µ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏ –∞—É–¥–∏–æ—ç–Ω–µ—Ä–≥–∏–∏...")
        scenes = enrich_scenes_with_audio(scenes, self.segments, self.energy)

        print(f"‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ —Å—Ü–µ–Ω: {len(scenes)}")
        return scenes

    def group(self, enriched_scenes, method="semantic"):
        """
        –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã—Ö —Å—Ü–µ–Ω –ø–æ —Å–º—ã—Å–ª—É –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.

        :param enriched_scenes: –°–ø–∏—Å–æ–∫ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω
        :param method: –ú–µ—Ç–æ–¥ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: "semantic" –∏–ª–∏ "window"
        :return: –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã
        """
        print(f"üß© –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ü–µ–Ω –º–µ—Ç–æ–¥–æ–º: {method}")

        if method == "semantic":
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–º—ã—Å–ª—É —Ç–µ–∫—Å—Ç–∞ (embedding + –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è)
            scenes_grouped = group_semantic_scenes(enriched_scenes, self.sentence_model)
        elif method == "window":
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–∞–º —Å —É—á–µ—Ç–æ–º –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
            scenes_grouped = cluster_scenes_with_time_windows(enriched_scenes, self.sentence_model)
        else:
            raise ValueError(f"Unknown grouping method: {method}")

        print(f"‚úÖ –°—Ü–µ–Ω —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ: {len(scenes_grouped)}")
        return scenes_grouped

    def postprocess(self, scenes_grouped):
        """
        –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω: —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π, –æ—á–∏—Å—Ç–∫–∞, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö.

        :param scenes_grouped: –°–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        :return: –û—á–∏—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω
        """
        print("üßº –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ü–µ–Ω...")

        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ü–µ–Ω—ã
        cleaned = resolve_time_overlaps(scenes_grouped)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ü–µ–Ω—ã —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏
        cleaned = clean_and_merge_short_scenes(cleaned)

        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(cleaned)}")
        return cleaned

    def run(self, scene_data, track_id_to_person=None, print_report=True):
        """
        –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ü–µ–Ω.

        :param scene_data: –°–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å—Ü–µ–Ω
        :param track_id_to_person: –°–ª–æ–≤–∞—Ä—å —Ç—Ä–µ–∫–æ–≤ ‚Üí –∏–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        :param print_report: –ï—Å–ª–∏ True, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è JSON-–æ—Ç—á–µ—Ç
        :return: –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω
        """
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏...")

        # –®–∞–≥ 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —Ç–µ–∫—Å—Ç–∞ –∏ —ç–Ω–µ—Ä–≥–∏–∏
        enriched = self.enrich(scene_data, track_id_to_person)

        # –®–∞–≥ 2: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ü–µ–Ω –ø–æ —Å–º—ã—Å–ª—É –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏
        grouped = self.group(enriched)

        # –®–∞–≥ 3: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É
        cleaned = self.postprocess(grouped)

        # –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ JSON-—Ñ–∞–π–ª
        if print_report:
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ü–µ–Ω–∞–º...")
            save_scenes_report_to_json(cleaned)
            print("üìÅ JSON-–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return cleaned
