import json
import os
import time
from openai import OpenAI


class OpenAIThemer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ä–µ—á–µ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (ASR)
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM-–º–æ–¥–µ–ª–∏ OpenAI (–Ω–∞–ø—Ä–∏–º–µ—Ä, GPT-4o).
    """

    def __init__(self, api_key: str, base_url: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI.

        :param api_key: API-–∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ OpenAI
        :param base_url: –ë–∞–∑–æ–≤—ã–π URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ https://api.openai.com/v1)
        """
        self.client = OpenAI(
            api_key=api_key,
            base_url=base_url
        )

    def get_themes(self, segments_short, audio_path: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã —Ä–µ—á–∏ –≤ LLM –¥–ª—è —Å–º—ã—Å–ª–æ–≤–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Ç–µ–º–∞–º.

        :param segments_short: –°–ø–∏—Å–æ–∫ —Ä–µ—á–µ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"start": ..., "end": ..., "text": ...}, ...]
        :param audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–º–µ–Ω–∏ –æ—Ç—á–µ—Ç–∞)
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–º–∞–º–∏: {"themes": [{"theme": ..., "time": [start, end]}, ...]}
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
        prompt = (
            "–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ä–µ—á–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏:\n\n"
            f"{json.dumps(segments_short, ensure_ascii=False, indent=2)}\n\n"
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö –∏ —Å–≥—Ä—É–ø–ø–∏—Ä—É–π –≤ —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏. "
            "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ —É–∫–∞–∂–∏:\n"
            "- –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã,\n"
            "- –æ–¥–∏–Ω –æ–±—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã —ç—Ç–æ–π —Ç–µ–º—ã "
            "(–≤ —Ñ–æ—Ä–º–∞—Ç–µ: [start, end], –≥–¥–µ start ‚Äî –Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞, end ‚Äî –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ).\n"
            "–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "{ \"themes\": [ { \"theme\": \"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã\", \"time\": [start, end] }, ... ] }"
        )

        # –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
        t0 = time.time()
        response = self.client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ —Ç–µ–º–∞–º."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        )
        duration = round(time.time() - t0, 2)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        content = response.choices[0].message.content

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            themes_data = json.loads(content)
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏.")
            themes_data = {"themes": []}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Ç—á—ë—Ç
        self.save_themes_report(themes_data, audio_path, duration)

        return themes_data

    def save_themes_report(self, themes_data, audio_path, duration_sec):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ JSON-—Ñ–∞–π–ª.

        :param themes_data: –°–ª–æ–≤–∞—Ä—å {"themes": [...]}
        :param audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)
        :param duration_sec: –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        os.makedirs("reports", exist_ok=True)
        base_name = os.path.splitext(os.path.basename(audio_path))[0]
        output_path = os.path.join("reports", f"{base_name}_themes_report.json")

        report = {
            "audio_path": audio_path,
            "num_themes": len(themes_data.get("themes", [])),
            "processing_time_sec": duration_sec,
            "themes": themes_data.get("themes", [])
        }

        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(report, f, ensure_ascii=False, indent=2)

        print(f"üß† –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
